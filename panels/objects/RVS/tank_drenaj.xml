<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="ru_RU.utf8"></prop>
  </prop>
  <prop name="Size">204 193</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">22 52</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[// ============================= Used libraries
#uses &quot;sdSymbolDynamics&quot;
//----------------------------------============ Used variables/constants
enum Fuel{
  G100 = 1,
  AI92 = 2,
  AI95 = 3,
  AI98 = 6,
  DT = 4,
  DTL = 5,
  DTZ = 6,
  DTA = 7,
  DTM = 8
};
const string DP = $dp;
// const string LogicRVS = $dpLogicRVS;
//
// const string LS1 = $ls1;

// =================
// const string LS2 = $ls2;
// const string LS3 = $ls3;

float max_lvl, min_lvl;
Fuel fuel;
//--------------------------------------------------

// ============================= Used properties
#property string resName
public void setResName(string s){text_name.text(s);}
public string getResName(){return text_name.text;}

// #property float max_lvl
// public void setMax_lvl(float s){max_lvl = s;}
// public float getMax_lvl(){return max_lvl;}
//
// #property float min_lvl
// public void setMin_lvl(float s){min_lvl = s;}
// public float getMin_lvl(){return min_lvl;}

/*#property Fuel fuel
public void setFuel(Fuel f){
//   fuel = f;
  string fuel_type = fuelToText(f);
  dpSetWait(DP + &quot;.fuel_type&quot;, fuel_type);
  dpGet(DP + &quot;.fuel_type&quot;, fuel);

}
public Fuel getFuel(){
  string temp;
  Fuel tmp_fuel;
  dpGet(DP + &quot;.fuel_type&quot;, temp);
  tmp_fuel = textToFuel((int)temp);
  return tmp_fuel;
}*/

//--------------------------------------------------


// ============================= Predefined functions
/*string fuelToColor(Fuel f){
  if(f == Fuel::G100){
    return &quot;100&quot;;
  }else if(f == Fuel::AI95){
    return &quot;AI95&quot;;
  }else if(f == Fuel::AI92){
    return &quot;AI92&quot;;
  }else if(f == Fuel::DT){
    return &quot;DT&quot;;
  }else if(f == Fuel::DTL){
    return &quot;DTL_pipe&quot;;
  }else if(f == Fuel::AI98){
    return &quot;AI98&quot;;
  }else if(f == Fuel::DTZ){
    return &quot;DT&quot;;
  }else if(f == Fuel::DTA){
    return &quot;DT&quot;;
  }else if(f == Fuel::DTM){
    return &quot;DT&quot;;
  }
}
string fuelToText(Fuel f){
  if(f == Fuel::G100){
    return &quot;G-100&quot;;
  }else if(f == Fuel::AI95){
    return &quot;АИ-95&quot;;
  }else if(f == Fuel::AI92){
    return &quot;АИ-92&quot;;
  }else if(f == Fuel::AI98){
    return &quot;АИ-98&quot;;
  }else if(f == Fuel::DT){
    return &quot;ДТ&quot;;
  }else if(f == Fuel::DTL){
    return &quot;ДТЛ&quot;;
  }else if(f == Fuel::DTZ){
    return &quot;ДТЗ&quot;;
  }else if(f == Fuel::DTA){
    return &quot;ДТА&quot;;
  }else if(f == Fuel::DTM){
    return &quot;ДТМ&quot;;
  }
}*/

string fuelToColor(string fuel){
  switch(fuel){
    case &quot;G-100&quot;:
      return &quot;AI100&quot;;
    case &quot;АИ-92&quot;:
      return &quot;AI92&quot;;
    case &quot;АИ-95&quot;:
      return &quot;AI95&quot;;
    case &quot;АИ-98&quot;:
      return &quot;AI98&quot;;
    case &quot;ДТ&quot;:
      return &quot;DT&quot;;
    case &quot;ДТЛ&quot;:
      return &quot;DT&quot;;
    case &quot;ДТЗ&quot;:
      return &quot;DT&quot;;
    case &quot;ДТА&quot;:
      return &quot;DT&quot;;
    case &quot;ДТМ&quot;:
      return &quot;DT&quot;;
  }
}

// string stateToString(int state){
//   string res = &quot;НЕИЗВЕСТНО&quot;;
//   switch(state){
//     case 1:
//       res = &quot;ХРАНЕНИЕ&quot;;
//       break;
//     case 2:
//       res = &quot;ПРИЕМ&quot;;
//       break;
//     case 3:
//       res = &quot;ОТПУСК&quot;;
//       break;
//     case 5:
//       res = &quot;ОТСТОЙ&quot;;
//       break;
//     case 6:
//       res = &quot;РЕМОНТ&quot;;
//       break;
//     case 99:
//       res = &quot;СМЕНА&quot;;
//       break;
//     default:
//       res = &quot;НЕИЗВЕСТНО&quot;;
//       break;
//   }
//   return res;
// }

mapping stateToColor(int state){
  mapping res = makeMapping(&quot;back&quot;, &quot;white&quot;, &quot;text&quot;, &quot;black&quot;);
  switch(state){
    case 1:  // Хранение
      res[&quot;back&quot;] = &quot;green&quot;;
      res[&quot;text&quot;] = &quot;black&quot;;
      break;
    case 2:  //Прием
      res[&quot;back&quot;] = &quot;yellow&quot;;
      res[&quot;text&quot;] = &quot;black&quot;;
      break;
    case 3:  // Отпуск
      res[&quot;back&quot;] = &quot;yellow&quot;;
      res[&quot;text&quot;] = &quot;black&quot;;
      break;
    case 5:  // Отстой
      res[&quot;back&quot;] = &quot;yellow&quot;;
      res[&quot;text&quot;] = &quot;black&quot;;
      break;
    case 6:  // Ремонт
      res[&quot;back&quot;] = &quot;black&quot;;
      res[&quot;text&quot;] = &quot;white&quot;;
      break;
    case 99:  // смена режима
      res[&quot;back&quot;] = &quot;&lt;green,4,yellow,4&gt;&quot;;
      res[&quot;text&quot;] = &quot;black&quot;;
      break;
    default:
      res[&quot;back&quot;] = &quot;red&quot;;
      res[&quot;text&quot;] = &quot;white&quot;;
      break;
  }
  return res;
}

// void cbLogicRVS(string dp1, int val,
//                 string dp2, int mes) {
//   bool loc_unack = false;
//   loc_unack = (val != mes);
//   sts_unack.visible(loc_unack);
//   mapping colors = stateToColor(mes);
//   txt_status.text(stateToString(mes));
//   txt_status.color(colors[&quot;text&quot;]);
//   txt_status.backCol(colors[&quot;back&quot;]);
// }

void worker_val(dyn_string dp, dyn_anytype val){
  sdScaleVertical(&quot;top_bar&quot;, val[1], val[3], val[2]);

  nolink_text.visible((val[4] == 1));
  nolink_back.visible((val[4] == 1));
}


// void worker_ls(dyn_string dp, dyn_bit32 sts){
//   int ls1 = (uint)sts[1];
//   rec_ls1.backCol = (ls1 &amp; 0x01 | ls1 &amp; 0x02 | ls1 &amp; 0x04) ? &quot;Red&quot; : &quot;Grey&quot;;
//   if(dynlen(sts) == 2){
//     int ls2 = (uint)sts[2];
//     rec_ls2.backCol = (ls2 &amp; 0x01 | ls2 &amp; 0x02 | ls2 &amp; 0x04) ? &quot;Red&quot; : &quot;Grey&quot;;
//   }
//   else if(dynlen(sts) == 3){
//    int ls2 = (uint)sts[2];
//    int ls3 = (uint)sts[3];
//    rec_ls3.backCol = (ls3 &amp; 0x01 | ls3 &amp; 0x02 | ls3 &amp; 0x04) ? &quot;Red&quot; : &quot;Grey&quot;;
//  }
// }
/*void initFuel(Fuel f){
  DebugN(f);
  if(f == Fuel::G100 | f == Fuel::AI92 | f == Fuel::AI95 | f == Fuel::AI98){
    DebugN(&quot;if&quot;, f);
    txt_fuel.text(strltrim(fuelToText(f), &quot;GАИ-&quot;));
  }
  else{
    txt_fuel.text(fuelToText(f));
  }
//   txt_fuel.text(fuelToText(f));

  rec_fuel.backCol(fuelToColor(f));
  top_bar.backCol(fuelToColor(f));
}*/

// void cb_fuel(string dpe, string val){
//   if(val == &quot;G-100&quot; | val == &quot;АИ-92&quot; | val == &quot;АИ-95&quot; | val == &quot;АИ-98&quot;){
//     txt_fuel.text(strltrim(val, &quot;GАИ-&quot;));
//   }
//   else{txt_fuel.text(val);}
//
//   rec_fuel.backCol(fuelToColor(val));
//   top_bar.backCol(fuelToColor(val));
// }

// void cbAlarmLogic(string dp, string color){
//   if(color != &quot;&quot;){
//     top_bar.backCol(color);
//   }else{
//     string fuel;
//     dpGet(DP + &quot;.fuel_type&quot;, fuel);
//     top_bar.backCol(fuelToColor(fuel));
//    initFuel(fuel);
//   }
// }
]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main(){
//   dpConnect(&quot;cbLogicRVS&quot;, LogicRVS + &quot;.STS.status_rvs&quot;,
//                           LogicRVS + &quot;.STS.status_mes&quot;);

//   dpConnect(&quot;cbAlarmLogic&quot;, LogicRVS + &quot;.UnsanctionedChangeLevel:_alert_hdl.._act_state_color&quot;);

  dpConnect(&quot;worker_val&quot;, DP + &quot;.LVL.val&quot;,
                          DP + &quot;.SCL.LSH&quot;,
                          DP + &quot;.SCL.LSL&quot;,
                          DP + &quot;.STS.MBS_ERR&quot;);

//   dpConnect(&quot;cb_fuel&quot;, DP + &quot;.fuel_type&quot;);

//   if(LS3 != &quot;&quot; &amp; LS2 != &quot;&quot;){
//     rec_ls2.visible(true);
//     rec_ls3.visible(true);
//     text_rec_ls2.visible(true);
//     text_rec_ls3.visible(true);
//     dpConnect(&quot;worker_ls&quot;, LS1 + &quot;.status.sts_bit&quot;,
//                            LS2 + &quot;.status.sts_bit&quot;,
//                            LS3 + &quot;.status.sts_bit&quot;);
//   }else if(LS2 != &quot;&quot;){
//     rec_ls2.visible(true);
//     rec_ls3.visible(false);
//     text_rec_ls2.visible(true);
//     text_rec_ls3.visible(false);
//     dpConnect(&quot;worker_ls&quot;, LS1 + &quot;.status.sts_bit&quot;,
//                            LS2 + &quot;.status.sts_bit&quot;);
//   }else{
//     rec_ls2.visible(false);
//     rec_ls3.visible(false);
//     text_rec_ls2.visible(false);
//     text_rec_ls3.visible(false);
//     dpConnect(&quot;worker_ls&quot;, LS1 + &quot;.status.sts_bit&quot;);
//   }

//   initFuel(fuel);
}
]]></script>
 </events>
 <shapes>
  <shape Name="RECTANGLE6" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">102</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 48</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{230,230,218}</prop>
    <prop name="TabOrder">81</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.289999999999999 0 0 0.7998002152327366 -227.9999999999998 -16.16523745049617</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">200 48</prop>
    <prop name="Size">101 127</prop>
    <prop name="CornerRadius">3</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="text_name" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">132</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">322 84</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">87</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.042572070456305 0 0 1.006369426751592 -241.2082066869302 -53.30985896645802</prop>
    <prop name="Location">322 84</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">Microsoft Tai Le,-1,13,5,50,0,0,0,0,0,Regular</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">№1/5 2000м3</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter|AlignVCenter]</prop>
   </properties>
  </shape>
  <shape Name="PUSH_BUTTON1" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">76</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">15.77003076330683 -63.3561474044061</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">72</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">29.99999999999999 22.38440600312883</prop>
    <prop name="Size">130 102</prop>
    <prop name="BorderStyle">None</prop>
    <prop name="Text">
     <prop name="ru_RU.utf8"></prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(mapping event)
{
//   ChildPanelOnCentral(&quot;faceplates/RVS/rvs.xml&quot;, dpGetDescription(DP + &quot;.&quot;), makeDynString(&quot;$dp:&quot; + DP,
//                                                                                            &quot;$dpLogicRVS:&quot; + LogicRVS,
//                                                                                            &quot;$ls1:&quot; + LS1,
//                                                                                            &quot;$ls2:&quot; + LS2,
//                                                                                            &quot;$ls3:&quot; + LS3,
//                                                                                            &quot;$name:&quot; + getResName(),
//                                                                                            &quot;$fuel:&quot; + (int)fuel));
}
]]></script>
    <script name="Acknowledge" isEscaped="1"><![CDATA[// SimpleCtrlScriptStart {valid}
main(int iType)
{
  dyn_errClass err;

  int          i, iReturnValue = 1, iDpCount = 12;
  dyn_int      diType = makeDynInt();
  dyn_string   dsDps;

  dsDps[1] = $dp+&quot;.LVL._sAH_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[2] = $dp+&quot;.LVL._sWH_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[3] = $dp+&quot;.LVL._sWL_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[4] = $dp+&quot;.LVL._sAL_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[5] = $dp+&quot;.WTR._sAH_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[6] = $dp+&quot;.WTR._sWH_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[7] = $dp+&quot;.WTR._sWL_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[8] = $dp+&quot;.WTR._sAL_Level&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[9] = $dp+&quot;.UnsanctionedChangeLevel&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[10] = $ls1+&quot;.status.bool.red&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[11] = $ls2+&quot;.status.bool.red&quot; + &quot;:_alert_hdl.._ack&quot;;
  dsDps[12] = $ls3+&quot;.status.bool.red&quot; + &quot;:_alert_hdl.._ack&quot;;

  if ( isFunctionDefined(&quot;isAckable&quot;) )
  {
    isAckable( iType, dsDps, iReturnValue );
    if ( iReturnValue == 0 || dynlen (dsDps ) &lt; 1 ) return;
  }

  for ( i = 1; i &lt;= dynlen(dsDps); i++ )
    diType[i] = iType;

  dpSetWait( dsDps, diType );

  err = getLastError();
  if ( dynlen(err) &gt; 0 )
    DebugN(err);
}
// SimpleCtrlScript {EP_confirm}
// dpCount {12}
// dp1 {$dp + &quot;.LVL._sAH_Level&quot;}
// dp2 {$dp + &quot;.LVL._sWH_Level&quot;}
// dp3 {$dp + &quot;.LVL._sWL_Level&quot;}
// dp4 {$dp + &quot;.LVL._sAL_Level&quot;}
// dp5 {$dp + &quot;.WTR._sAH_Level&quot;}
// dp6 {$dp + &quot;.WTR._sWH_Level&quot;}
// dp7 {$dp + &quot;.WTR._sWL_Level&quot;}
// dp8 {$dp + &quot;.WTR._sAL_Level&quot;}
// dp9 {$dp + &quot;.UnsanctionedChangeLevel&quot;}
// dp10 {$ls1 + &quot;.status.bool.red&quot;}
// dp11 {$ls2 + &quot;.status.bool.red&quot;}
// dp12 {$ls3 + &quot;.status.bool.red&quot;}
// SimpleCtrlScriptEnd {EP_confirm}
]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="PANEL_REF2" referenceId="5">
   <properties>
    <prop name="FileName">objects/AI/ai_rvs/ai_rvs_mini.xml</prop>
    <prop name="Location">51.40404040404037 20.61577369801423</prop>
    <prop name="Geometry">1 0 0 1 23.27337281619953 33.96328247438924</prop>
    <prop name="TabOrder">77</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$ANALOG</prop>
      <prop name="Value">LVL</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dp</prop>
      <prop name="Value">$dp</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dpLogicRVS</prop>
      <prop name="Value">$dpLogicRVS</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="PANEL_REF3" referenceId="6">
   <properties>
    <prop name="FileName">objects/AI/ai_rvs/ai_rvs_mini.xml</prop>
    <prop name="Location">51.40404040404037 20.61577369801423</prop>
    <prop name="Geometry">1 0 0 1 23.27337281619953 50.05738264416847</prop>
    <prop name="TabOrder">78</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$ANALOG</prop>
      <prop name="Value">VOL</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dp</prop>
      <prop name="Value">$dp</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dpLogicRVS</prop>
      <prop name="Value">$dpLogicRVS</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="PANEL_REF4" referenceId="7">
   <properties>
    <prop name="FileName">objects/AI/ai_rvs/ai_rvs_mini.xml</prop>
    <prop name="Location">51.40404040404037 20.61577369801423</prop>
    <prop name="Geometry">1 0 0 1 23.27337281619953 65.91298995657317</prop>
    <prop name="TabOrder">79</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$ANALOG</prop>
      <prop name="Value">DNS</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dp</prop>
      <prop name="Value">$dp</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dpLogicRVS</prop>
      <prop name="Value">$dpLogicRVS</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="PANEL_REF5" referenceId="8">
   <properties>
    <prop name="FileName">objects/AI/ai_rvs/ai_rvs_mini.xml</prop>
    <prop name="Location">51.40404040404037 20.61577369801423</prop>
    <prop name="Geometry">1 0 0 1 23.27337281619952 82.38918043276368</prop>
    <prop name="TabOrder">80</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$ANALOG</prop>
      <prop name="Value">MAS</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dp</prop>
      <prop name="Value">$dp</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dpLogicRVS</prop>
      <prop name="Value">$dpLogicRVS</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="PANEL_REF6" referenceId="10">
   <properties>
    <prop name="FileName">objects/AI/ai_rvs/ai_rvs_mini.xml</prop>
    <prop name="Location">51.40404040404037 20.61577369801423</prop>
    <prop name="Geometry">1 0 0 1 23.27337281619952 98.86537090895411</prop>
    <prop name="TabOrder">137</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$ANALOG</prop>
      <prop name="Value">TMP</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dp</prop>
      <prop name="Value">$dp</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$dpLogicRVS</prop>
      <prop name="Value">$dpLogicRVS</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <shape Name="PRIMITIVE_TEXT9" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">353</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">59.39999999999992 86.62165605095541</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">151</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.246720709872084 0 0 1 -8.234939803304677 -41.99648317027972</prop>
    <prop name="Location">59.39999999999992 86.62165605095541</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">L</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="PRIMITIVE_TEXT10" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">354</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">59.59999999999991 101.7453402614817</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">152</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.354166666666679 0 0 1 -14.0370214702128 -41.99648317027975</prop>
    <prop name="Location">59.59999999999991 101.7453402614817</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">V</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="PRIMITIVE_TEXT11" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">355</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">192 180</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">153</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.160000000000011 0 0 1.258748688026108 -156.6720214702142 -152.2714208473967</prop>
    <prop name="Location">192 180</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">p</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="PRIMITIVE_TEXT16" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">356</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">64 152</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">154</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.083333333333333 0 0 1 -1.578688136878779 -60.85653137997583</prop>
    <prop name="Location">64 152</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">M</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="PRIMITIVE_TEXT17" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">357</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">192 180</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">155</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.160000000000011 0 0 1.019736842105263 -156.6720214702142 -76.0513935353643</prop>
    <prop name="Location">192 180</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">T</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="RECTANGLE42" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">362</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">48 128</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">white</prop>
    <prop name="TabOrder">160</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.249999999999999 0 0 1.384719020728228 -26.77972963690292 -132.0188617725375</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">48 128</prop>
    <prop name="Size">17 55</prop>
    <prop name="CornerRadius">2</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="back_bar" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">363</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">48 128</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{128,128,128}</prop>
    <prop name="TabOrder">161</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.295518207282913 0 0 1.387083436076611 -29.3287492447461 -132.4491853659432</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">48 128</prop>
    <prop name="Size">17 55</prop>
    <prop name="CornerRadius">2</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="top_bar" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">364</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">48 128</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{117,174,117}</prop>
    <prop name="TabOrder">162</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.294482207117153 0 0 -1.387083436076613 -29.27073323546353 297.5466798178065</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">48 128</prop>
    <prop name="Size">17 55</prop>
    <prop name="CornerRadius">2</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="nolink_back" shapeType="RECTANGLE" layerId="1">
   <properties>
    <prop name="serialId">244</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">Red</prop>
    <prop name="TabOrder">133</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[cross,10,left]]</prop>
    <prop name="Geometry">0.516 0 0 0.3366666666666666 24.83999999999999 18.63333333333334</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">10 10</prop>
    <prop name="Size">251 301</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="nolink_text" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">243</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">white</prop>
    <prop name="BackColor">Red</prop>
    <prop name="TabOrder">132</prop>
    <prop name="ToolTipText">
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapProjecting,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.4823114302441202 0 0 0.5388859487293071 27.17639976582318 -10.05517333480992</prop>
    <prop name="Location">10 130</prop>
    <prop name="Size">261 61</prop>
    <prop name="Font">
     <prop name="ru_RU.utf8">MS Shell Dlg 2,-1,32,5,50,0,0,0,0,0,Обычный</prop>
    </prop>
    <prop name="Text">
     <prop name="ru_RU.utf8">СВЯЗЬ</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter|AlignVCenter]</prop>
   </properties>
  </shape>
 </shapes>
</panel>
